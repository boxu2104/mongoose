agent particle {
    ~int x 
    ~int y
    ~int id
    ~boolean dead
    ~int life

    int step_size(){
        ~int steppie = (1:4 | 2:3 | 2:2 | 4:1 | 4:(0-1) | 2:(0-2) | 2:(0-3) | 1:(0-4))
        return steppie
    }

    create(~int gx,~int gy,~int gid, ~int glife)    {
        x = gx
        y = gy
        id = gid
        life = glife
        dead = false
    }
    action {
        if(not dead){
             pif(0.8)         {
             life = life + 1
             ~int xnew = 1000
             ~int ynew = 1000
             ~int steps = 0
             while(board.blocks(id,xnew,ynew) and steps < 1000)    {
                 ~int xstep
                 xstep = step_size()
                 ~int ystep
                 ystep = step_size()
                 xnew = x + xstep
                 ynew = y + ystep
                 steps = steps + 1
                 }
             if(steps==1000) {
                     print ("impossible to move")
                     } else {
                 x = xnew
                 y = ynew
                board.inform(id,x,y);
                 }
             } pelse         {
                 if(life == 1) {
                         dead = true
                     } else {
                     ~int newlife = life/2
                     ~particle clone
                     clone = particle(x+0,y+0,id+0, newlife)
                     life = newlife
                 }
             }
        }
    }
    destroy {
    }
}

agent board_agent{
    ~int n=10
    ~int[100] board_other
    create()    {
        ~int i=0
        while(i<n)        {
            ~int j=0
            while(j<n)            {
                board_other[i*n+j] = 0
                j = j + 1
            }
            i = i + 1
        }
    }
    action {
    }
    destroy{
    }
    boolean blocks(~int id,~int x, ~int y)    {
        ~boolean b
        if(x>=n or y>=n or x < 0 or y < 0) {
            b = true
        } else {
            b = board_other[x*n+y]==x
        }
        return b
    }
    none inform(~int id, ~int x, ~int y)    {
        board_other[x*n+y]=id
        return
    }
    none print_state()    {
        ~int i=0
        while(i<n)        {
            ~int j = 0
            ~string str = ''
            while (j<n) {
                  str = str + board_other[i*n+j] + "  "
                  j = j + 1
                  }
            print(str)
            i = i + 1
            }
            return
    }
}

environment{
    populate {
        print("starting")
        ~board_agent board = board_agent()

        ~particle p1 = particle(1,1,1,100)
        ~particle p2 = particle(2,2,2,100)
        ~particle p3 = particle(3,3,3,100)
        ~particle p4 = particle(4,4,4,100)
        ~particle p5 = particle(5,5,5,100)
        }
        action {
           print(TICKCOUNT)
        }
}

terminate{
        (TICKCOUNT == 10) {
        print("State of board")
        }
}

analysis{
        board.print_state()
}